-- Lorenzo McDaniel

-- 1
CREATE TABLE BUYER AS SELECT * FROM FSRE.BUYER;
CREATE TABLE PROPERTY AS SELECT * FROM FSRE.property;
CREATE TABLE AGENT AS SELECT * FROM FSRE.AGENT;
CREATE TABLE LISTING AS SELECT * FROM FSRE.LISTING;

-- 2
ALTER TABLE LISTING
ADD PRIMARY KEY (List_ID);

ALTER TABLE BUYER
ADD PRIMARY KEY (Buyer_ID);

ALTER TABLE AGENT
ADD PRIMARY KEY(Agent_ID);

ALTER TABLE PROPERTY
ADD PRIMARY KEY (Prop_ID);

-- 3
CREATE TABLE SHOWING (

Show_ID           NUMBER(10) PRIMARY KEY                                 ,
Show_Date         DATE NOT NULL                                          ,
List_ID           NUMBER NOT NULL REFERENCES LISTING(List_ID)            ,
Buyer_ID          NUMBER  REFERENCES BUYER(Buyer_ID)                     ,
Show_Zone         CHAR(1)                                                ,
Agent_ID          NOT NULL REFERENCES AGENT(Agent_ID)                    ,
CONSTRAINT SHOW_ZONE_LIMIT CHECK( SHOW_ZONE IN ('N','S','E','W'))
);

-- 4
INSERT INTO SHOWING VALUES (1,To_Date('NOVEMBER 30, 2019','MONTH DD,YYYY'),32,3,'N',103);
INSERT INTO SHOWING VALUES (2,To_Date('NOVEMBER 28, 2019','MONTH DD,YYYY'),31,6,'W',102);

-- 5
COMMIT;

-- 6
UPDATE LISTING
SET LIST_ENDDATE = LIST_BEGINDATE + 90
WHERE LIST_ENDDATE IS NULL;

-- 7
CREATE SEQUENCE SHOW_ID_SEQ
START WITH 100
INCREMENT BY 1
NOCACHE;

-- 8
CREATE SEQUENCE LISTING_ID_SEQ
START WITH 300
INCREMENT BY 2
NOCACHE;

-- 9 -- WORKS
CREATE OR REPLACE TRIGGER trg_list_status
AFTER INSERT OR UPDATE OF LIST_STATUS ON LISTING
FOR EACH ROW

BEGIN
  IF :NEW.LIST_STATUS = 'I' THEN
    UPDATE PROPERTY
    SET  PROP_STATUS = 'U'
    WHERE :OLD.PROP_ID = PROP_ID;
  ELSIF :NEW.LIST_STATUS = 'A' THEN
    UPDATE PROPERTY
    SET  PROP_STATUS = 'L'
    WHERE :OLD.PROP_ID = PROP_ID;
  ELSE
    Dbms_Output.PUT_LINE('THE LIST STATUS IS INVALID');
  END IF;
END;
/

-- 10
CREATE OR REPLACE TRIGGER trg_new_show
BEFORE INSERT ON SHOWING
FOR EACH ROW

DECLARE
  TEMP_PZONE CHAR(1);
  TEMP_AGENT NUMBER;
  TEMP_AGENT2 NUMBER;
  T_NAME VARCHAR(25);
  AGENT_CHECK NUMBER;
  LIST_CHECK NUMBER;
  BUY_CHECK NUMBER;
  T_AGENT_ID NUMBER;
BEGIN

   SELECT PROP_ZONE INTO TEMP_PZONE
   FROM LISTING JOIN PROPERTY ON LISTING.PROP_ID  = PROPERTY.PROP_ID
   WHERE LISTING.LIST_ID = :NEW.LIST_ID ;
    IF :NEW.SHOW_ZONE IS NULL THEN
        :NEW.SHOW_ZONE := TEMP_PZONE;
    ELSE
      IF :NEW.SHOW_ZONE != TEMP_PZONE THEN
          Dbms_Output.PUT_LINE( 'show_zone value does not match property zone value');
      END IF;
    END IF;

    SELECT AGENT_ID
    INTO TEMP_AGENT
    FROM  LISTING
    WHERE LIST_ID = :NEW.LIST_ID;

    IF :NEW.AGENT_ID IS NULL THEN
      SELECT LISTING.AGENT_ID INTO TEMP_AGENT2
      FROM AGENT JOIN LISTING ON AGENT.AGENT_ID = LISTING.AGENT_ID
      WHERE LISTING.LIST_ID = :NEW.LIST_ID;
      :NEW.AGENT_ID := TEMP_AGENT2;
    ELSE
      IF :NEW.AGENT_ID != TEMP_AGENT THEN
        SELECT AGENT.AGENT_FNAME || ' ' || AGENT_LNAME
        INTO T_NAME
        FROM LISTING JOIN AGENT ON LISTING.AGENT_ID = AGENT.AGENT_ID
        WHERE LISTING.LIST_ID = :NEW.LIST_ID;
        Dbms_Output.PUT_LINE( 'showing listing number: ' || :NEW.LIST_ID || ' THAT BELONGS TO AGENT ' || T_NAME );
      END IF;
    END IF;
END;
/


-- 11 -- WORKS COMPLETE
CREATE OR REPLACE PROCEDURE prc_new_show (temp_show_date IN showing.show_date%TYPE , temp_listid IN listing.list_id%TYPE , temp_buyerid IN buyer.buyer_id%TYPE)
AS
BEGIN
  DECLARE
    STATUS CHAR(1);
    TEMP_BUYERMAXPRICE NUMBER;
    TEMP_LIST_PRICE NUMBER;
    PZONE CHAR(1);
    T_AGENTID NUMBER;
    LISTING_COUNT NUMBER;
    BUYER_COUNT NUMBER;
    BUYERMAX_COUNT NUMBER;
  BEGIN
    SELECT Count(*)
    INTO LISTING_COUNT
    FROM LISTING
    WHERE LIST_ID = TEMP_LISTID;

    SELECT Count(*)
    INTO BUYER_COUNT
    FROM BUYER
    WHERE BUYER_ID = TEMP_BUYERID;

    SELECT Count(*) INTO BUYERMAX_COUNT
    FROM LISTING LEFT JOIN AGENT ON LISTING.AGENT_ID = AGENT.AGENT_ID JOIN BUYER ON BUYER.AGENT_ID = AGENT.AGENT_ID
    WHERE BUYER.BUYER_ID = TEMP_BUYERID AND LISTING.LIST_ID = TEMP_LISTID ;

    SELECT BUYER_MAXPRICE INTO TEMP_BUYERMAXPRICE
    FROM LISTING JOIN AGENT ON LISTING.AGENT_ID = AGENT.AGENT_ID JOIN BUYER ON BUYER.AGENT_ID = AGENT.AGENT_ID
    WHERE BUYER.BUYER_ID = TEMP_BUYERID AND LISTING.LIST_ID = TEMP_LISTID ;


    IF LISTING_COUNT = 0 THEN
      Dbms_Output.PUT_LINE(' LISTING ID IS INVALID');
    ELSIF BUYER_COUNT = 0 THEN
      Dbms_Output.PUT_LINE('THE BUYER ID IS INVALID');
    ELSIF BUYERMAX_COUNT = 0 THEN
       Dbms_Output.PUT_LINE(' BUYER MAXPRICE IS NULL');

    ELSE

      SELECT LIST_STATUS
      INTO STATUS
      FROM LISTING
      WHERE LIST_ID = TEMP_LISTID ;

      SELECT PROP_ZONE INTO PZONE
      FROM LISTING JOIN PROPERTY ON LISTING.PROP_ID = PROPERTY.PROP_ID
      WHERE LISTING.LIST_ID =  TEMP_LISTID ;

      SELECT AGENT.AGENT_ID INTO T_AGENTID
      FROM AGENT JOIN LISTING ON AGENT.AGENT_ID = LISTING.AGENT_ID
      WHERE  LISTING.LIST_ID = TEMP_LISTID ;

      IF STATUS = 'I'  THEN
        Dbms_Output.PUT_LINE('THIS LISTING IS INACTIVE AND CANNOT BE SHOWN') ;
      ELSIF STATUS = 'S' THEN
        Dbms_Output.PUT_LINE('THIS LISTING IS ALREADY SOLD AND CANNOT BE SHOWN');
      ELSIF STATUS = 'A' THEN
        SELECT DISTINCT(LIST_PRICE)
        INTO TEMP_LIST_PRICE
        FROM LISTING
        WHERE LIST_ID = TEMP_LISTID ;
        IF TEMP_LIST_PRICE > (TEMP_BUYERMAXPRICE * .25) + TEMP_BUYERMAXPRICE THEN
          Dbms_Output.PUT_LINE('THE LIST PRICE IS SIGNIFICANTLY HIGHER THAN THE BUYERS MAX PRICE');
        END IF;
        INSERT INTO SHOWING VALUES (SHOW_ID_SEQ.NEXTVAL ,TEMP_SHOW_DATE ,TEMP_LISTID ,TEMP_BUYERID ,PZONE,T_AGENTID);
      END IF;
   END IF;
  END;
END;
/

-- 12   -- WORKS COMPLETE
CREATE OR REPLACE PROCEDURE PRC_NEW_LIST(TEMP_LIST_BEGINDATE IN LISTING.LIST_BEGINDATE%TYPE, TEMP_LISTPRICE IN LISTING.LIST_PRICE%TYPE, COM_PERCENT IN LISTING.LIST_PERCENT%TYPE, T_PROP_ID IN PROPERTY.PROP_ID%TYPE
,T_AGENT_ID IN AGENT.AGENT_ID%TYPE)
AS
BEGIN
  DECLARE
  STATUS CHAR(1);
  ENDDATE DATE;
  NAME VARCHAR(20);
  TEMP_STATUS  CHAR(1);
  PROPID_COUNT NUMBER(1);
  AGENT_IDCOUNT NUMBER(1);
  STATUS_COUNT NUMBER(1);
  CHANGE_CHECK CHAR(1) := 'N';
  BEGIN

    SELECT Count(*)
    INTO PROPID_COUNT
    FROM LISTING
    WHERE PROP_ID = T_PROP_ID;

    SELECT Count(LIST_ID)
    INTO  AGENT_IDCOUNT
    FROM LISTING
    WHERE T_AGENT_ID = AGENT_ID AND PROP_ID = T_PROP_ID ;

    SELECT Count(*)
    INTO STATUS_COUNT
    FROM LISTING JOIN PROPERTY ON LISTING.PROP_ID = PROPERTY.PROP_ID
    WHERE PROPERTY.PROP_ID = T_PROP_ID AND LISTING.AGENT_ID = T_AGENT_ID;

    SELECT LIST_ENDDATE
    INTO ENDDATE
    FROM LISTING
    WHERE PROP_ID = T_PROP_ID AND AGENT_ID = T_AGENT_ID;

    SELECT LIST_STATUS
    INTO STATUS
    FROM LISTING
    WHERE PROP_ID = T_PROP_ID AND AGENT_ID = T_AGENT_ID;

    IF PROPID_COUNT = 0 THEN
      Dbms_Output.PUT_LINE(' THE PROPERTY PARAM IS INVALID') ;

    ELSIF AGENT_IDCOUNT = 0 THEN
      Dbms_Output.PUT_LINE(' THE AGENT PARAM IS INVALID');

    ELSIF STATUS_COUNT = 0 THEN
      Dbms_Output.PUT_LINE('NO LISTINGS MATCH GIVEN PARAMETERS');

    ELSE

       IF STATUS = 'A' AND ENDDATE < TEMP_LIST_BEGINDATE  THEN
            UPDATE LISTING
            SET LIST_STATUS = 'I'
            WHERE PROP_ID = T_PROP_ID AND AGENT_ID = T_AGENT_ID;

       ELSIF STATUS = 'A' AND ENDDATE > TEMP_LIST_BEGINDATE THEN
            SELECT  AGENT.AGENT_FNAME || ' ' || AGENT.AGENT_LNAME
            INTO NAME
            FROM AGENT JOIN LISTING ON AGENT.AGENT_ID = LISTING.AGENT_ID JOIN PROPERTY ON LISTING.PROP_ID = PROPERTY.PROP_ID
            WHERE LISTING.PROP_ID = T_PROP_ID AND LISTING.AGENT_ID = T_AGENT_ID;
            Dbms_Output.PUT_LINE(' WARNING THIS PROPERTY HAS AN ACTIVE LISTING WITH THE AGENT ' || NAME || ' UNTIL ' || ENDDATE);
       ELSE
           INSERT INTO LISTING VALUES (LISTING_ID_SEQ.NEXTVAL,T_PROP_ID ,T_AGENT_ID,TEMP_LIST_BEGINDATE,TEMP_LIST_BEGINDATE + 90,TEMP_LISTPRICE,COM_PERCENT,'A');
       END IF;
  END IF;
END;
END;
/